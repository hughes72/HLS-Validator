package edu.psgv.sweng861;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * This class demonstrates how to interactively read in a url from a user and
 * validate it with the HLS protocol. Optionally enter in a filename for batch
 * mode
 *
 * @author Kyle Hughes
 */
public class HLS3 {
	private static final Logger logger = LogManager.getLogger();
	private final static String VERSION = "v3.0";
	private static final String seperator = "***********************************************************************";
	// problem reading the url when processing
	//private static boolean readError = false;
	//our object representations of playlists
	private static List<Playlist> playListObjs;
	private static PlaylistFactory factory = PlaylistFactory.getInstance();

	/**
	 * main() Allows users to enter playlist url's via the command line. The program
	 * will validate the url and display the contents if valid. User may also pass
	 * in an argument representing a filename to run in batch mode
	 *
	 * @param arg[0]
	 *            path to the input text file for batch processing.
	 */
	public static void main(String[] args) {
		logger.debug(">>main()");
		boolean nextPlaylist = true;

		System.out.println("Welcome to the HLS3 Validator " + VERSION + "\n");
		// Assume the command line param is a file path
		if (args.length == 1) {
			playListObjs = new ArrayList<Playlist>();
			logger.info("Batch mode activated");

			List<String> playLists = parseBatchFile(args[0]);
			if (playLists.size() > 0) {
				processPlayLists(playLists);
				//visitPlaylists
				validateContents(playListObjs);
				printReport(playListObjs);
			} else {
				System.out.println("The File did not contain any playLists, please try again");
			}
		} else if (args.length < 1) {
			// initialize for each seperate url in interactive mode
			playListObjs = new ArrayList<Playlist>();
			logger.info("Interactive mode activated");
			// Interactive input
			Scanner scanner = new Scanner(System.in);
			while (nextPlaylist) {
				System.out.println("\nPlease enter a Playlist URL to validate, type 'quit' to finish ");
				String playListUrl = scanner.nextLine();
				if (playListUrl.equals("quit")) {
					System.out.println("Closing the validator");
					scanner.close();
					logger.debug("<<main()");
					System.exit(1);
				} else {
					// reset for each input
					playListObjs = new ArrayList<Playlist>();
					// process interactive url
					List<String> playlist = new ArrayList<>();
					playlist.add(playListUrl);
					processPlayLists(playlist);
					//calls the visitors
					validateContents(playListObjs);
					printReport(playListObjs);
				}
			}
			scanner.close();
		}
		if (args.length > 1) {
			logger.error("More than one argument passed in ");
			System.out.println("ALERT: Only one input parameter accepted. Exiting now...");
		}
	}

	/**
	 * processPlaylists() Whether in batch or interactive, coordinates the
	 * processing of the playlist file(s) one by one
	 *
	 * @param playLists
	 *            Playlist urls gathered from a file or entered by user
	 */
	private static void processPlayLists(List<String> playLists) {
		logger.debug(">>processPlaylists()");

		for (String pl : playLists) {
			logger.info("Begin Processing of {} " + pl);
			List<String> contents = Utilities.readPlaylist(pl);
			logger.debug("Contents found in playlist " + contents.toString());
			if (contents.size() > 0) {
				// create object representation and add contents to the object
				Playlist newPlaylist = factory.create(pl, contents);

				if (newPlaylist != null) {
					playListObjs.add(newPlaylist);
				} else {
					System.out.println("ALERT: " + pl + " unable to find any EXTINF or EXT-X-STREAM-INF tags");
					logger.error("ERROR - " + pl + " does not contain valid tags");
				}
				logger.debug("Finish Processing of {} " + pl);
			}
		}
		logger.debug("<<processPlaylists()");
	}


	/**
	 * parseBatchFile() accepts a String containing the path to a text file and
	 * returns a list of URL Strings in the file
	 *
	 * @param filePath
	 *            path to the input file.
	 * @return string with all playlist urls in the file.
	 */
	private static List<String> parseBatchFile(String filePath) {
		logger.debug(">>parseBatchFile()");
		List<String> playLists = new ArrayList<>();
		String line = "";
		try {
			// FileReader reads text files in the default encoding.
			FileReader fileReader = new FileReader(filePath);
			// Always wrap FileReader in BufferedReader.
			BufferedReader bufferedReader = new BufferedReader(fileReader);
			while ((line = bufferedReader.readLine()) != null) {
				playLists.add(line);
			}
			// Always close files.
			bufferedReader.close();
		} catch (FileNotFoundException ex) {
			System.out.println("Unable to open file '" + filePath + "'. Exiting now");
			logger.info("Unable to open file {} --" + filePath + " -- " + ex.toString());
			System.exit(2);
		} catch (IOException ex) {
			System.out.println("Error reading file '" + filePath + "'. Exiting now");
			logger.info("Unable to read file {} --" + filePath + " -- " + ex.toString());
			System.exit(3);
		}
		logger.debug("<<parseBatchFile()");
		return playLists;
	}

	/**
	 * validateContents() validates the playList starts with #EXTM3U and will create
	 * a new error to associate with the playlist
	 *
	 * @param pl playlists found in batch or interactive mode
	 */
	public static void validateContents(List<Playlist> playlists) {
		//eventually move to config file
			for(Playlist pl : playlists) {
				pl.accept(new FirstLineVisitor());
				pl.accept(new DurationVisitor());
				pl.accept(new TagUriVisitor());
			}
	}

	/**
	 * printContents() Print all of the playlists along with the any variants found
	 * Master playlists will tab variants to distinguish. In batch mode, new
	 * playlists in the text file are seperated by double seperators
	 *
	 * @param contents
	 *            list of contents contained in playlist file
	 * @param fileName
	 *            the playlist file to print
	 */
	private static void printReport(List<Playlist> playLists) {
		logger.debug(">>printContents()");
		if (playLists != null && playLists.size() > 0) {
			System.out.println("\n\t\t\t------New Playlist Report --------\n");
			for (Playlist pl : playLists) {
				// the master will set this true if it ever gets set
				pl.printReport(false);
				System.out.println("\n" + seperator);
			}
		} else {
			logger.error("Something went wrong, no playlists to print");
		}
		logger.debug("<<printContents()");
	}

}