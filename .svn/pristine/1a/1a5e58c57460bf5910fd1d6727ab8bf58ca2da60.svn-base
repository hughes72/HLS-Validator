package edu.psgv.sweng861;

import java.util.List;

public class TagUriVisitor extends HLSVisitor{
	
	/**
	 * visitMedia() Verify each
	 */
	@Override
	public void visitMedia(MediaPlaylist pl) {
		boolean nextLine = false;
		List<String> contents = pl.getContent();
		int lineCount = 0;
		for(String line : contents) {
			lineCount++;
			if(nextLine) {
				//check to see if it has a media segment (.ts)
				if(!line.endsWith(".ts")) {
					PlaylistError error = PlaylistFactory.getErrorObj(lineCount,"#EXTINF is not followed by a media segment");
					pl.addError(error);
				}
				//reset for next 
				nextLine=false;
			} else {
				//check for tags
				if(line.startsWith("#EXTINF")) {
					nextLine = true;
				} else if(line.startsWith("#EXT-X-STREAM-INF")){				
					//TODO
				} else {
					//skip
				}
			}
		}
	}

	@Override
	public void visitMaster(MasterPlaylist pl) {
		boolean nextLine = false;
		List<String> contents = pl.getContent();
		int lineCount = 0;
		for(String line : contents) {
			lineCount++;
			//previous line had an appropriate tag so check the URI
			if(nextLine) {
				//check to see if it has a media segment (.ts)
				if(!line.endsWith(".m3u8")) {
					PlaylistError error = PlaylistFactory.getErrorObj(lineCount,"#EXT-X-STREAM-INF is not followed by a variant stream");
					pl.addError(error);
				}
				//reset for next 
				nextLine=false;
			} else {
				//check for tags
				if(line.startsWith("#EXT-X-STREAM-INF")) {
					nextLine = true;
					//   MUST reject Playlists that contain both Media Segment Tags and Master
					 //  Playlist tags
				} else if(line.startsWith("#EXTINF")){				
					PlaylistError error = PlaylistFactory.getErrorObj(lineCount,
											"#EXTINF, Conflicting tag found unable to process variant");
					pl.addError(error);
				} else {
					//skip
				}
			}
		}
		
	}

}
